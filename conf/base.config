/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/sarek Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {
    cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }
    shell  = ['/bin/bash', '-euo', 'pipefail']

    // memory errors which should be retried. otherwise error out
    //errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    errorStrategy = 'retry'
    maxRetries    = 3
    maxErrors     = '30'

    // Process-specific resource requirements
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_small {
        cpus          = { check_max( 2     * (2 ** (task.attempt - 1)), 'cpus') }
        memory        = { check_max( 4.GB * (2 ** (task.attempt - 1)), 'memory') }
        time          = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_single {
        cpus          = { check_max( 2 * (2 ** (task.attempt - 1)), 'cpus') }
        memory        = { check_max( 8.GB * (2 ** (task.attempt - 1)), 'memory') }
        time          = { check_max( 24.h  * task.attempt, 'time') }
    }
    withLabel:process_low {
        cpus          = { check_max( 4     * (2 ** (task.attempt - 1)), 'cpus') }
        memory        = { check_max( 16.GB * (2 ** (task.attempt - 1)), 'memory') }
        time          = { check_max( 24.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus          = { check_max( 8     * (2 ** (task.attempt - 1)), 'cpus') }
        memory        = { check_max( 32.GB * (2 ** (task.attempt - 1)), 'memory') }
        time          = { check_max( 24.h   * task.attempt, 'time') }
    }
    withLabel:process_high {
        cpus          = { check_max( 16    * (2 ** (task.attempt - 1)), 'cpus')}
        memory        = { check_max( 64.GB * (2 ** (task.attempt - 1)), 'memory') }
        time          = { check_max( 24.h  * task.attempt, 'time') }
    }
    withLabel:process_long {
        time          = { check_max( 40.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory        = { check_max( 64.GB * (2 ** (task.attempt - 1)), 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 5
    }
    withName: 'UNZIP.*|UNTAR.*|TABIX.*|BUILD_INTERVALS|CREATE_INTERVALS_BED|CUSTOM_DUMPSOFTWAREVERSIONS|VCFTOOLS|BCFTOOLS.*|SAMTOOLS_INDEX' {
        cpus            = { check_max( 2 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
    withName: 'FASTQC'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 8.GB * task.attempt, 'memory' ) }
    }
    withName: 'FASTP'{
        cpus            = { check_max( 4 , 'cpus' ) }
        memory          = { check_max( 64.GB * (2 ** (task.attempt - 1)), 'memory' ) }
    }
    withName: 'CNVKIT_BATCH'{
        cpus            = { check_max( 8 * (2 ** (task.attempt - 1)), 'cpus' ) }
        memory          = { check_max( 64.GB * (2 ** (task.attempt - 1)), 'memory' ) }
    }
    withName: 'BWAMEM1_MEM|BWAMEM2_MEM' {
        cpus            = { check_max( 8 * (2 ** (task.attempt - 1)), 'cpus' ) }
        memory          = { check_max( 64.GB * (2 ** (task.attempt - 1)), 'memory' ) }
    }
    withName: 'GATK4_MARKDUPLICATES|GATK4_MARKDUPLICATESSPARK' {
        cpus            = { check_max( 8 * (2 ** (task.attempt - 1)), 'cpus' ) }
        memory          = { check_max( 64.GB * (2 ** (task.attempt - 1)), 'memory' ) }
    }
    withName:'GATK4_APPLYBQSR|GATK4_APPLYBQSR_SPARK|GATK4_BASERECALIBRATOR|GATK4_BASERECALIBRATOR_SPARK|GATK4_GATHERBQSRREPORTS'{
        cpus            = { check_max( 8 * (2 ** (task.attempt - 1)), 'cpus' ) }
        memory          = { check_max( 64.GB * (2 ** (task.attempt - 1)), 'memory' ) }
    }
    withName:'MOSDEPTH'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
    }
    withName:'STRELKA.*|MANTA.*' {
        cpus            = { check_max( 16 * task.attempt, 'cpus' ) }
        memory          = { check_max( 32.GB * task.attempt, 'memory' ) }
    }
    withName:'SAMTOOLS_CONVERT'{
        memory          = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withName:'GATK4_MERGEVCFS'{
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
    }
    withName: 'MULTIQC' {
        cpus            = { check_max( 4 * task.attempt, 'cpus' ) }
        memory          = { check_max( 16.GB * task.attempt, 'memory' ) }
    }
}
